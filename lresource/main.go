package main

// @author  Mikhail Kirillov <mikkirillov@yandex.ru>
// @version 1.002
// @date    2019-10-11

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"mime"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/belfinor/ltime/strftime"
)

func usage() {

	fmt.Println(`
Use lresource:

  -name string
        internal resource name
  -noarch
        gzip data
  -output string
        output file name
  -package string
        package name
  -source string
        source file
 `)

	os.Exit(1)
}

func main() {

	var pkg string
	var src string
	var name string
	var dest string
	var noarch bool

	flag.StringVar(&pkg, "package", "", "package name")
	flag.StringVar(&src, "source", "", "source file")
	flag.StringVar(&name, "name", "", "internal resource name")
	flag.StringVar(&dest, "output", "", "output file name")
	flag.BoolVar(&noarch, "noarch", false, "gzip data")

	flag.Parse()

	if pkg == "" {
		fmt.Println("package name not entered")
		usage()
	}

	if src == "" {
		fmt.Println("source file not entered")
		usage()
	}

	if name == "" {
		fmt.Println("internal resource name not entered")
		usage()
	}

	if dest == "" {
		panic("output file name not enetered")
		usage()
	}

	data, err := ioutil.ReadFile(src)
	if err != nil {
		panic(err)
	}

	rw, err := os.Create(dest)
	if err != nil {
		panic(err)
	}
	defer rw.Close()

	if !noarch {

		var b bytes.Buffer
		gz := gzip.NewWriter(&b)

		if _, err := gz.Write(data); err != nil {
			panic(err)
		}
		if err := gz.Close(); err != nil {
			panic(err)
		}
		data = b.Bytes()
	}

	result := base64.StdEncoding.EncodeToString(data)

	info, err := os.Lstat(src)
	if err != nil {
		panic("read file info failed")
	}

	ext := filepath.Ext(src)
	ct := "application/octet-stream"

	if ext != "" {
		ct = mime.TypeByExtension(ext)
		if ct == "" {
			ct = "application/octet-stream"
		}
	}

	ts := info.ModTime().Unix()

	builder := strings.Builder{}

	fmt.Fprintf(rw, "package %s\n\n", pkg)
	fmt.Fprintf(rw, "// @date    "+strftime.Format("%Y-%m-%d", time.Now())+"\n")
	fmt.Fprintf(rw, "// @comment this file was generated by lresource\n\n")

	fmt.Fprintf(rw, "import(\n\t\"github.com/belfinor/lresource\"\n)\n\n")
	fmt.Fprintf(rw, "func init() {\n\n")

	fmt.Fprintf(rw, "\tlresource.Add(%s,%s,%d,%t,`\n", strconv.Quote(name), strconv.Quote(ct), ts, !noarch)

	i := 0

	for _, r := range result {
		i++
		builder.WriteRune(r)
		if i >= 64 {
			builder.WriteRune('\n')
			fmt.Fprint(rw, builder.String())
			i = 0
			builder.Reset()
		}
	}

	if i > 0 {
		fmt.Fprint(rw, builder.String())
	}

	fmt.Fprintf(rw, "`)\n\n}\n\n")
}
