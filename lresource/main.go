package main

// @author  Mikhail Kirillov <mikkirillov@yandex.ru>
// @version 1.000
// @date    2019-09-18

import (
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/belfinor/ltime/strftime"
)

func main() {

	var pkg string
	var src string
	var name string
	var dest string

	flag.StringVar(&pkg, "package", "", "package name")
	flag.StringVar(&src, "source", "", "source file")
	flag.StringVar(&name, "name", "", "internal resource name")
	flag.StringVar(&dest, "output", "", "output file name")

	flag.Parse()

	if pkg == "" {
		panic("package name not entered")
	}

	if src == "" {
		panic("source file not entered")
	}

	if name == "" {
		panic("internal resource name not entered")
	}

	if dest == "" {
		panic("output file name not enetered")
	}

	data, err := ioutil.ReadFile(src)
	if err != nil {
		panic(err)
	}

	rw, err := os.Create(dest)
	if err != nil {
		panic(err)
	}
	defer rw.Close()

	result := base64.StdEncoding.EncodeToString(data)

	builder := strings.Builder{}

	fmt.Fprintf(rw, "package %s\n\n", pkg)
	fmt.Fprintf(rw, "// @date    "+strftime.Format("%Y-%m-%d", time.Now())+"\n")
	fmt.Fprintf(rw, "// @comment this file was generated by lresource\n\n")

	fmt.Fprintf(rw, "import(\n\t\"github.com/belfinor/lresource\"\n)\n\n")
	fmt.Fprintf(rw, "func init() {\n\n")

	fmt.Fprintf(rw, "\tlresource.Add(%s,`\n", strconv.Quote(name))

	i := 0

	for _, r := range result {
		i++
		builder.WriteRune(r)
		if i >= 64 {
			builder.WriteRune('\n')
			fmt.Fprint(rw, builder.String())
			i = 0
			builder.Reset()
		}
	}

	if i > 0 {
		fmt.Fprint(rw, builder.String())
	}

	fmt.Fprintf(rw, "`)\n\n}\n\n")
}
